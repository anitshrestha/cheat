# Uploading package to PyPI
* https://github.com/pypa/setuptools/issues/941

## ~/.pypirc
[distutils]
index-servers =
    pypi

[pypi]
username: cangermueller
password: <pass>

## Uploading
python setup.py bdist_wheel upload
python setup.py sdist upload
python setup.py bdist upload

## Using twine (does not work anymore)
twine upload dist/X
  deepcpg-1.0.5.tar.gz // source package
  deepcpg-1.0.5-py3-none-any.whl // binary

# General
* https://docs.python.org/2/tutorial/modules.html
* import pkg.module // -> pkg.module.__name__ == module
* python pkg.module // -> pkg.module.__name__ == __main__; run as script
* search paths
  - current directory
  - $PYTHONPATH
  - sys.path
* dir(module) // list names defined by module



# Adding pkg to site path
~/research/name/name
                tests
export PYTHONPATH=~/research/name:$PYTHONPATH


# Relative import
* Does not work for scripts -> import base package required first
from __future__ import absolute import // needed for Python2
from . import module // import module in CWD
from .module import fun // import function in module in CWDmodule

## Outside packages
sys.insert(0, path.join(path.dirname(path.abspath(__file__)), '../biseq'))


# Importing modules with special names
csv_converter_utils = importlib.import_module(
    'google3.medical.retina.db.import.ukbiobank.csv_converter_utils')



# Package hierarchy
* For structuring modules; avoiding name collisions
* Require __init__.py for being recognized as packages!
* package: contains modules
* modules: contains classes, functions
pkg/
  __init__.py
    // must exist, but can be empty
    // executed when pkg is imported: import pkg
  __main__.py // optional, run by 'python pkg'
  spkg1/
    __init__.py
    module.py spkg2/
    __init__.py
    module.py
  module.py
import pkg.spkg1.module
import pkg.spkg2.module
import pkg.module


# Tools
virutalenv  // create virtualenv
virtualenvwrapper // manage several virtualenvs
tox // run tests in different virtualenv
versioneer  // automizes update version numbers
sphinx  // documentation
pyscaffold  // automatically creates package structure


# Versioning
X.Y.Z
X. MAJOR version when they make incompatible API changes,
Y. MINOR version when they add functionality in a backwards-compatible manner, and
Z. MAINTENANCE version when they make backwards-compatible bug fixes.
