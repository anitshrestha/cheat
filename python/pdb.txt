# Start
import pdb; pdb.set_trace() // at location in file.py where debug should start
python -m pdb file.py // stop at first line
python -m pdb file.py; c  // breaks at error position
  * post-moterm debugging // debugging after program crashed
~/.pdbrc; ./.pdbrc  // config read at the beginning: for aliases or breakpoints

pdb.runcall(fun, args)  // call function with args
pdb.run('fun(args)')  // evaluate strings; stops before evaluation

# ipython
ipython --pdb file.py // start pdb on exception
%debug  // start pdb on exception

# General
h // show help
n, s  // next, step
!expr // execute expression
interact  // start interactive command; ! not necessary
alias my_cmd !a + b // define alias

# Breakpoints
b // list all breakpoints
b 23  // set breakpoint
b 23, x>0 // conditional breakpoint
b file:24
b fun // break at first line of function
condition 1, x>0  // add condition to existing breakpoint
tbreak  23 // temporary breakpoint; deleted after first hit
cl 23 // clear breakpoint
disable 1
enable 1
ignore 1 n  // ignore bp 1 n times

# Navigation
n // next list
c // continue
j[ump] 10 // jump to line 10; skip intermediate commands; back jumps possible
r[eturn] // until return
until [line] // until line or end of frame (after function)
where // show current line
l // list lines following the current line
l start,end // list lines for given line numbers (can not be relative)
l start,count // if count < start, interpreted as count, otherwise end
where // stack trace
up  // move current frame one layer up, execution point stays the same
down // move current frame one layer down
restart // restart from beginning using updated script; breakpoints are kept

# Advances
pfile file.py // show file content
pfile object  // show source of object
pdef fun // show definition function
pdoc fun // show docstring of function or file

# Info
a, args // show arguments
whatis object // show type of object


# ipdb ignore set_trace
a) jump x // jump out of loop
b)
  def f(): pass
  ipdb.set_trace = f
