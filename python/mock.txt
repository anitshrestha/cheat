# Mocking a function
m = mock.patch.object(my_module, 'my_fun', my_fun_mock)
  * To mock my_model.my_fun
  * 2nd argument is string!
  * my_module can be module that is imported by module that is tested



m.start()
  * Starts mock

m = mock.patch.object('my_module', my_fun, side_effect=['output1', 'output2'])
  * as string
  * side_effect is list of outputs for each call

with mock.patch.object('my_module', my_fun, my_fun_mock): // start not required


# Example
def _decode_jpeg_mock(...):
  ...

def test_ReadFda(self, ignored_tag, ignored_key):
  with mock.patch.object(topcon_converter_utils, 'decode_jpeg',
                         _decode_jpeg_mock):
    ...


@mock.patch.object(topcon_converter_utils, 'decode_jpeg', _decode_jpeg_mock):
def test_ReadFda(self,  mock):
  mock.return_value = 'hello'


# Creating mock object
object = mock.MagicMock()
object.BindAndQuery.side_effect = [RETURN_1ST_CALL, RETURN_2ND_CALL]
